<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wr.estate.mapper.work.cleaningMangement.CleanPlanMapper">
  <resultMap id="BaseResultMap" type="com.wr.remote.work.cleaningManagement.CleanPlan">
    <id column="plan_id" jdbcType="BIGINT" property="planId" />
    <result column="community_id" jdbcType="BIGINT" property="communityId" />
    <result column="plan_name" jdbcType="VARCHAR" property="planName" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="plan_order" jdbcType="CHAR" property="planOrder" />
    <result column="plan_model" jdbcType="CHAR" property="planModel" />
    <result column="plan_num" jdbcType="INTEGER" property="planNum" />
    <result column="start_time" jdbcType="VARCHAR" property="startTime" />
    <result column="end_time" jdbcType="VARCHAR" property="endTime" />
    <result column="gap_time" jdbcType="DECIMAL" property="gapTime" />
    <result column="allot_way" jdbcType="CHAR" property="allotWay" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="del_flag" jdbcType="CHAR" property="delFlag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    plan_id, community_id, plan_name, address, plan_order, plan_model, plan_num, start_time,
    end_time, gap_time, allot_way, create_by, create_time, update_by, update_time, del_flag
  </sql>
  <select id="selectByExample" parameterType="com.wr.remote.work.cleaningManagement.CleanPlanExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from xccj_work.bus_clean_plan
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from xccj_work.bus_clean_plan
    where plan_id = #{planId,jdbcType=BIGINT}
  </select>


  <delete id="deleteByExample" parameterType="com.wr.remote.work.cleaningManagement.CleanPlanExample">
    delete from xccj_work.bus_clean_plan
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.wr.remote.work.cleaningManagement.CleanPlan">
    insert into xccj_work.bus_clean_plan (plan_id, community_id, plan_name,
      address, plan_order, plan_model,
      plan_num, start_time, end_time,
      gap_time, allot_way, create_by,
      create_time, update_by, update_time,
      del_flag)
    values (#{planId,jdbcType=BIGINT}, #{communityId,jdbcType=BIGINT}, #{planName,jdbcType=VARCHAR},
      #{address,jdbcType=VARCHAR}, #{planOrder,jdbcType=CHAR}, #{planModel,jdbcType=CHAR},
      #{planNum,jdbcType=INTEGER}, #{startTime,jdbcType=VARCHAR}, #{endTime,jdbcType=VARCHAR},
      #{gapTime,jdbcType=DECIMAL}, #{allotWay,jdbcType=CHAR}, #{createBy,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP},
      #{delFlag,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.wr.remote.work.cleaningManagement.CleanPlan">
    insert into xccj_work.bus_clean_plan
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="planId != null">
        plan_id,
      </if>
      <if test="communityId != null">
        community_id,
      </if>
      <if test="planName != null">
        plan_name,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="planOrder != null">
        plan_order,
      </if>
      <if test="planModel != null">
        plan_model,
      </if>
      <if test="planNum != null">
        plan_num,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="gapTime != null">
        gap_time,
      </if>
      <if test="allotWay != null">
        allot_way,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="planId != null">
        #{planId,jdbcType=BIGINT},
      </if>
      <if test="communityId != null">
        #{communityId,jdbcType=BIGINT},
      </if>
      <if test="planName != null">
        #{planName,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="planOrder != null">
        #{planOrder,jdbcType=CHAR},
      </if>
      <if test="planModel != null">
        #{planModel,jdbcType=CHAR},
      </if>
      <if test="planNum != null">
        #{planNum,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=VARCHAR},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=VARCHAR},
      </if>
      <if test="gapTime != null">
        #{gapTime,jdbcType=DECIMAL},
      </if>
      <if test="allotWay != null">
        #{allotWay,jdbcType=CHAR},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wr.remote.work.cleaningManagement.CleanPlanExample" resultType="java.lang.Integer">
    select count(*) from xccj_work.bus_clean_plan
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update xccj_work.bus_clean_plan
    <set>
      <if test="record.planId != null">
        plan_id = #{record.planId,jdbcType=BIGINT},
      </if>
      <if test="record.communityId != null">
        community_id = #{record.communityId,jdbcType=BIGINT},
      </if>
      <if test="record.planName != null">
        plan_name = #{record.planName,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.planOrder != null">
        plan_order = #{record.planOrder,jdbcType=CHAR},
      </if>
      <if test="record.planModel != null">
        plan_model = #{record.planModel,jdbcType=CHAR},
      </if>
      <if test="record.planNum != null">
        plan_num = #{record.planNum,jdbcType=INTEGER},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=VARCHAR},
      </if>
      <if test="record.endTime != null">
        end_time = #{record.endTime,jdbcType=VARCHAR},
      </if>
      <if test="record.gapTime != null">
        gap_time = #{record.gapTime,jdbcType=DECIMAL},
      </if>
      <if test="record.allotWay != null">
        allot_way = #{record.allotWay,jdbcType=CHAR},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.delFlag != null">
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update xccj_work.bus_clean_plan
    set plan_id = #{record.planId,jdbcType=BIGINT},
      community_id = #{record.communityId,jdbcType=BIGINT},
      plan_name = #{record.planName,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      plan_order = #{record.planOrder,jdbcType=CHAR},
      plan_model = #{record.planModel,jdbcType=CHAR},
      plan_num = #{record.planNum,jdbcType=INTEGER},
      start_time = #{record.startTime,jdbcType=VARCHAR},
      end_time = #{record.endTime,jdbcType=VARCHAR},
      gap_time = #{record.gapTime,jdbcType=DECIMAL},
      allot_way = #{record.allotWay,jdbcType=CHAR},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.wr.remote.work.cleaningManagement.CleanPlan">
    update xccj_work.bus_clean_plan
    <set>
      <if test="communityId != null">
        community_id = #{communityId,jdbcType=BIGINT},
      </if>
      <if test="planName != null">
        plan_name = #{planName,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="planOrder != null">
        plan_order = #{planOrder,jdbcType=CHAR},
      </if>
      <if test="planModel != null">
        plan_model = #{planModel,jdbcType=CHAR},
      </if>
      <if test="planNum != null">
        plan_num = #{planNum,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=VARCHAR},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=VARCHAR},
      </if>
      <if test="gapTime != null">
        gap_time = #{gapTime,jdbcType=DECIMAL},
      </if>
      <if test="allotWay != null">
        allot_way = #{allotWay,jdbcType=CHAR},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=CHAR},
      </if>
    </set>
    where plan_id = #{planId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wr.remote.work.cleaningManagement.CleanPlan">
    update xccj_work.bus_clean_plan
    set community_id = #{communityId,jdbcType=BIGINT},
      plan_name = #{planName,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      plan_order = #{planOrder,jdbcType=CHAR},
      plan_model = #{planModel,jdbcType=CHAR},
      plan_num = #{planNum,jdbcType=INTEGER},
      start_time = #{startTime,jdbcType=VARCHAR},
      end_time = #{endTime,jdbcType=VARCHAR},
      gap_time = #{gapTime,jdbcType=DECIMAL},
      allot_way = #{allotWay,jdbcType=CHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=CHAR}
    where plan_id = #{planId,jdbcType=BIGINT}
  </update>


  <select id="selectOneDistribution" resultType="com.wr.remote.work.distribution.Distribution">
    select
    allot_id,
    community_id,
    allot_type,
    allot_way,
    user_type,
    assist_num,
    gap_hour,
    update_time,
    update_by
    from xccj_work.bus_allot
    <where>
      del_flag = '0'
      <if test="communityId != null and communityId != 0"><!-- 所属小区 -->
        AND community_id = #{communityId}
      </if>
       <if test="allotType != null and allotType != 0"><!-- 配置类型 -->
        AND allot_type = #{allotType}
      </if>
    </where>
  </select>

  <update id="deleteByPrimaryKey"  parameterType="java.lang.Long">
    update xccj_work.bus_clean_plan set del_flag = '1'
    where plan_id = #{planId,jdbcType=BIGINT}
  </update>


<!--  查询需要生成工单的保洁计划 -->
  <select id="SelectOpenPlanOrderCleanPlan" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from xccj_work.bus_clean_plan
    where plan_order = '1' and del_flag = '0'
  </select>


<!--  查询分配设置-->
  <select id="selectAllot" resultType="com.wr.remote.work.distribution.Distribution">
    select
      allot_id,
      community_id,
      allot_type,
      allot_way,
      user_type,
      assist_num,
      gap_hour,
      update_time,
      update_by
    from xccj_work.bus_allot
    where
      community_id = #{communityId}  and allot_type = #{allotType} and del_flag ='0'
  </select>

</mapper>
